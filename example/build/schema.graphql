schema {
  query: QueryRoot
  mutation: Mutation
}

type AccessScope {
  handle: String!
}

input AdminGenerateLoginTokenInput {
  clientMutationId: String
}

type AdminGenerateLoginTokenPayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  passwordlessLoginToken: String!

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

type App implements Node {
  description: String
  developerName: String @deprecated(reason: "Not supported anymore")
  developerUrl: URL!

  # Specifies if the app is using the Embedded App SDK
  embedded: Boolean!
  failedRequirements: [FailedRequirement!]!
  features: [String!]!
  icon: Image!
  id: ID!
  installUrl: URL
  launchUrl: URL!
  pricingDetails: String

  # A short summary for the app's pricing details
  pricingDetailsSummary: String!
  screenshots: [Image!]!
  title: String!
  uninstallMessage: String!
  uninstallUrl: URL
}

type AppConnection {
  # A list of edges.
  edges: [AppEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type AppEdge {
  cursor: String!
  node: App!
}

type AppFeedback {
  app: App!
  callToAction: URL
  messages: [UserError!]!
}

input AppInstallInput {
  clientMutationId: String

  # The id for the channel api client to be installed.
  id: ID!
}

type AppInstallPayload {
  app: App
  channel: Channel @deprecated(reason: "Field not necessary since this mutation works with apps now")
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

type AppLink {
  embedded: Boolean!
  icon: Image!
  text: String!
  title: String!
  url: URL!
}

type AppStoreUrlGeneratePayload {
  appStoreUrl: URL!

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

input AppUninstallInput {
  clientMutationId: String

  # The id for the app api client to be uninstalled.
  id: ID!

  # Reason for uninstalling the app.
  feedback: String
}

type AppUninstallPayload {
  app: App
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  deletedChannelId: ID @deprecated(reason: "Field no longer required since this mutation now handles both channels and apps.")

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

input AttachmentInput {
  id: ID

  # The URL of the attachment. Must be a signed upload URL.
  url: String
}

# Represents a generic custom attribute.
type Attribute {
  # Key or name of the attribute.
  key: String!

  # Value of the attribute.
  value: String
}

# Specifies the input fields required for an attribute.
input AttributeInput {
  key: String!
  value: String!
}

type BasicEvent implements Event, Node {
  appTitle: String
  attributeToApp: Boolean!
  attributeToUser: Boolean!
  createdAt: DateTime!
  criticalAlert: Boolean!
  id: ID!
  message: String!
}

type Blog implements Node {
  id: ID!
}

type BlogArticle implements Node {
  id: ID!
}

type Channel {
  app: App!
  collectionPublications(first: Int!, after: String, reverse: Boolean = false): CollectionPublicationConnection!
  handle: String!
  name: String!
  navigationItems: [NavigationItem!]!
  overviewPath: URL
  productPublications(first: Int!, after: String, reverse: Boolean = false): ProductPublicationConnection!
}

type ChannelConnection {
  # A list of edges.
  edges: [ChannelEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type ChannelEdge {
  cursor: String!
  node: Channel!
}

type Collection implements Node {
  # Stripped description of the collection, single line with HTML tags removed.
  description(
    # Truncates string after the given length.
    truncateAt: Int
  ): String!

  # The description of the collection, complete with HTML formatting.
  descriptionHtml: HTML!
  handle: String!
  hasProduct(
    # The ID of the product to check.
    id: ID!
  ): Boolean!
  id: ID!
  image(
    # Image width in pixels between 1 and 2048
    maxWidth: Int

    # Image height in pixels between 1 and 2048
    maxHeight: Int

    # If specified, crop the image keeping the specified region
    crop: CropRegion

    # Image size multiplier retina displays. Must be between 1 and 3
    scale: Int = 1
  ): Image
  products(first: Int!, after: String, reverse: Boolean = false): ProductConnection!
  productsCount: Int!
  publications(first: Int!, after: String, reverse: Boolean = false): CollectionPublicationConnection!
  ruleSet: CollectionRuleSet
  sortOrder: CollectionSortOrder!
  title: String!
  updatedAt: DateTime!
}

type CollectionAddProductsPayload {
  collection: Collection

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

type CollectionConnection {
  # A list of edges.
  edges: [CollectionEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type CollectionCreatePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  collection: Collection

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

input CollectionDeleteInput {
  clientMutationId: String
  id: ID!
}

type CollectionDeletePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  deletedCollectionId: ID
  shop: Shop!

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

type CollectionEdge {
  cursor: String!
  node: Collection!
}

input CollectionInput {
  clientMutationId: String

  # Specifies the collection to update or create a new collection if absent.
  id: ID

  # Required for creating a new collection.
  title: String
  descriptionHtml: String
  handle: String
  sortOrder: CollectionSortOrder
  ruleSet: CollectionRuleSetInput
  image: ImageInput

  # Initial list of collection products. Only valid with `productCreate` and without rules.
  products: [ID!]

  # Initial list of collection publications. Only valid with `productCreate`.
  publications: [CollectionPublicationInput!]
}

type CollectionPublication {
  channel: Channel!
  collection: Collection!
}

type CollectionPublicationConnection {
  # A list of edges.
  edges: [CollectionPublicationEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type CollectionPublicationEdge {
  cursor: String!
  node: CollectionPublication!
}

input CollectionPublicationInput {
  channelHandle: String!
}

input CollectionPublishInput {
  clientMutationId: String

  # The collection to create or update publications for.
  id: ID!
  collectionPublications: [CollectionPublicationInput!]!
}

type CollectionPublishPayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  collectionPublications: [CollectionPublication!]
  shop: Shop!

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

type CollectionRule {
  column: CollectionRuleColumn!
  condition: String!
  relation: CollectionRuleRelation!
}

enum CollectionRuleColumn {
  TITLE
  TYPE
  VENDOR
  VARIANT_PRICE
  TAG
  VARIANT_COMPARE_AT_PRICE
  VARIANT_WEIGHT
  VARIANT_INVENTORY
  VARIANT_TITLE
}

input CollectionRuleInput {
  column: CollectionRuleColumn!
  relation: CollectionRuleRelation!
  condition: String!
}

enum CollectionRuleRelation {
  EQUALS
  NOT_EQUALS
  GREATER_THAN
  LESS_THAN
  STARTS_WITH
  ENDS_WITH
  CONTAINS
  NOT_CONTAINS
}

type CollectionRuleSet {
  appliedDisjunctively: Boolean!
  rules: [CollectionRule!]!
}

input CollectionRuleSetInput {
  appliedDisjunctively: Boolean!
  rules: [CollectionRuleInput!]
}

# The set of valid sort keys for the collections query.
enum CollectionSortKeys {
  TITLE
  UPDATED_AT
  ID
  RELEVANCE
}

enum CollectionSortOrder {
  MANUAL
  BEST_SELLING
  ALPHA_ASC
  ALPHA_DESC
  PRICE_DESC
  PRICE_ASC
  CREATED_DESC
  CREATED
}

input CollectionUnpublishInput {
  clientMutationId: String

  # The collection to create or update publications for.
  id: ID!
  collectionPublications: [CollectionPublicationInput!]!
}

type CollectionUnpublishPayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  shop: Shop!

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

type CollectionUpdatePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  collection: Collection

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

type CommentEvent implements Event, Node {
  appTitle: String
  attachments: [CommentEventAttachment!]!
  attributeToApp: Boolean!
  attributeToUser: Boolean!
  author: StaffMember!
  canDelete: Boolean!
  canEdit: Boolean!
  createdAt: DateTime!
  criticalAlert: Boolean!
  edited: Boolean!
  id: ID!
  message: String!
  rawMessage: String!
  subject: CommentEventSubject!
}

type CommentEventAttachment {
  fileExtension: String
  id: ID!
  image(
    # Image width in pixels between 1 and 2048
    maxWidth: Int

    # Image height in pixels between 1 and 2048
    maxHeight: Int

    # If specified, crop the image keeping the specified region
    crop: CropRegion

    # Image size multiplier retina displays. Must be between 1 and 3
    scale: Int = 1
  ): Image
  name: String!
  size: Int!
  url: URL!
}

interface CommentEventSubject {
  hasTimelineComment: Boolean!

  # Globally unique identifier.
  id: ID!
}

# The part of the image that should remain after cropping.
enum CropRegion {
  # Keep the center of the image
  CENTER

  # Keep the top of the image
  TOP

  # Keep the bottom of the image
  BOTTOM

  # Keep the left of the image
  LEFT

  # Keep the right of the image
  RIGHT
}

# Currency codes
enum CurrencyCode {
  # United States Dollars (USD)
  USD

  # Euro (EUR)
  EUR

  # United Kingdom Pounds (GBP)
  GBP

  # Canadian Dollars (CAD)
  CAD

  # Afghan Afghani (AFN)
  AFN

  # Albanian Lek (ALL)
  ALL

  # Algerian Dinar (DZD)
  DZD

  # Angolan Kwanza (AOA)
  AOA

  # Argentine Pesos (ARS)
  ARS

  # Armenian Dram (AMD)
  AMD

  # Aruban Florin (AWG)
  AWG

  # Australian Dollars (AUD)
  AUD

  # Barbadian Dollar (BBD)
  BBD

  # Azerbaijani Manat (AZN)
  AZN

  # Bangladesh Taka (BDT)
  BDT

  # Bahamian Dollar (BSD)
  BSD

  # Bahraini Dinar (BHD)
  BHD

  # Belarusian Ruble (BYR)
  BYR

  # Belize Dollar (BZD)
  BZD

  # Bhutanese Ngultrum (BTN)
  BTN

  # Bosnia and Herzegovina Convertible Mark (BAM)
  BAM

  # Brazilian Real (BRL)
  BRL

  # Bolivian Boliviano (BOB)
  BOB

  # Botswana Pula (BWP)
  BWP

  # Brunei Dollar (BND)
  BND

  # Bulgarian Lev (BGN)
  BGN

  # Burmese Kyat (MMK)
  MMK

  # Cambodian Riel
  KHR

  # Cayman Dollars (KYD)
  KYD

  # Central African CFA Franc (XAF)
  XAF

  # Chilean Peso (CLP)
  CLP

  # Chinese Yuan Renminbi (CNY)
  CNY

  # Colombian Peso (COP)
  COP

  # Comorian Franc (KMF)
  KMF

  # Congolese franc (CDF)
  CDF

  # Costa Rican Colones (CRC)
  CRC

  # Croatian Kuna (HRK)
  HRK

  # Czech Koruny (CZK)
  CZK

  # Danish Kroner (DKK)
  DKK

  # Dominican Peso (DOP)
  DOP

  # East Caribbean Dollar (XCD)
  XCD

  # Egyptian Pound (EGP)
  EGP

  # Ethiopian Birr (ETB)
  ETB

  # CFP Franc (XPF)
  XPF

  # Fijian Dollars (FJD)
  FJD

  # Gambian Dalasi (GMD)
  GMD

  # Ghanaian Cedi (GHS)
  GHS

  # Guatemalan Quetzal (GTQ)
  GTQ

  # Guyanese Dollar (GYD)
  GYD

  # Georgian Lari (GEL)
  GEL

  # Haitian Gourde (HTG)
  HTG

  # Honduran Lempira (HNL)
  HNL

  # Hong Kong Dollars (HKD)
  HKD

  # Hungarian Forint (HUF)
  HUF

  # Icelandic Kronur (ISK)
  ISK

  # Indian Rupees (INR)
  INR

  # Indonesian Rupiah (IDR)
  IDR

  # Israeli New Shekel (NIS)
  ILS

  # Jamaican Dollars (JMD)
  JMD

  # Japanese Yen (JPY)
  JPY

  # Jersey Pound
  JEP

  # Jordanian Dinar (JOD)
  JOD

  # Kazakhstani Tenge (KZT)
  KZT

  # Kenyan Shilling (KES)
  KES

  # Kuwaiti Dinar (KWD)
  KWD

  # Kyrgyzstani Som (KGS)
  KGS

  # Laotian Kip (LAK)
  LAK

  # Latvian Lati (LVL)
  LVL

  # Lebanese Pounds (LBP)
  LBP

  # Lesotho Loti (LSL)
  LSL

  # Liberian Dollar (LRD)
  LRD

  # Lithuanian Litai (LTL)
  LTL

  # Malagasy Ariary (MGA)
  MGA

  # Macedonia Denar (MKD)
  MKD

  # Macanese Pataca (MOP)
  MOP

  # Malawian Kwacha (MWK)
  MWK

  # Maldivian Rufiyaa (MVR)
  MVR

  # Mexican Pesos (MXN)
  MXN

  # Malaysian Ringgits (MYR)
  MYR

  # Mauritian Rupee (MUR)
  MUR

  # Moldovan Leu (MDL)
  MDL

  # Moroccan Dirham
  MAD

  # Mongolian Tugrik
  MNT

  # Mozambican Metical
  MZN

  # Namibian Dollar
  NAD

  # Nepalese Rupee (NPR)
  NPR

  # Netherlands Antillean Guilder
  ANG

  # New Zealand Dollars (NZD)
  NZD

  # Nicaraguan Córdoba (NIO)
  NIO

  # Nigerian Naira (NGN)
  NGN

  # Norwegian Kroner (NOK)
  NOK

  # Omani Rial (OMR)
  OMR

  # Pakistani Rupee (PKR)
  PKR

  # Papua New Guinean Kina (PGK)
  PGK

  # Paraguayan Guarani (PYG)
  PYG

  # Peruvian Nuevo Sol (PEN)
  PEN

  # Philippine Peso (PHP)
  PHP

  # Polish Zlotych (PLN)
  PLN

  # Qatari Rial (QAR)
  QAR

  # Romanian Lei (RON)
  RON

  # Russian Rubles (RUB)
  RUB

  # Rwandan Franc (RWF)
  RWF

  # Samoan Tala (WST)
  WST

  # Saudi Riyal (SAR)
  SAR

  # Sao Tome And Principe Dobra (STD)
  STD

  # Serbian dinar (RSD)
  RSD

  # Seychellois Rupee (SCR)
  SCR

  # Singapore Dollars (SGD)
  SGD

  # Sudanese Pound (SDG)
  SDG

  # Syrian Pound (SYP)
  SYP

  # South African Rand (ZAR)
  ZAR

  # South Korean Won (KRW)
  KRW

  # South Sudanese Pound (SSP)
  SSP

  # Solomon Islands Dollar (SBD)
  SBD

  # Sri Lankan Rupees (LKR)
  LKR

  # Surinamese Dollar (SRD)
  SRD

  # Swedish Kronor (SEK)
  SEK

  # Swiss Francs (CHF)
  CHF

  # Taiwan Dollars (TWD)
  TWD

  # Thai baht (THB)
  THB

  # Tanzanian Shilling (TZS)
  TZS

  # Trinidad and Tobago Dollars (TTD)
  TTD

  # Tunisian Dinar (TND)
  TND

  # Turkish Lira (TRY)
  TRY

  # Turkmenistani Manat (TMT)
  TMT

  # Ugandan Shilling (UGX)
  UGX

  # Ukrainian Hryvnia (UAH)
  UAH

  # United Arab Emirates Dirham (AED)
  AED

  # Uruguayan Pesos (UYU)
  UYU

  # Uzbekistan som (UZS)
  UZS

  # Vanuatu Vatu (VUV)
  VUV

  # Venezuelan Bolivares (VEF)
  VEF

  # Vietnamese đồng (VND)
  VND

  # West African CFA franc (XOF)
  XOF

  # Yemeni Rial (YER)
  YER

  # Zambian Kwacha (ZMW)
  ZMW
}

type Customer implements Node {
  acceptsMarketing: Boolean!
  addresses(
    # Truncate the array result to this size
    first: Int
  ): [MailingAddress!]!
  averageOrderAmount: Money
  canDelete: Boolean!
  createdAt: DateTime!
  defaultAddress: MailingAddress
  displayName: String!
  email: String
  firstName: String
  hasNote: Boolean!
  id: ID!
  image(
    # Image width and height in pixels between 1 and 2048
    size: Int
  ): Image!
  lastName: String
  lastOrder: Order
  note: String
  orders(
    first: Int!
    after: String
    sortKey: OrderSortKeys = ID
    reverse: Boolean = false

    # Supported filter parameters:
    #  - `status`
    #  - `financial_status`
    #  - `fulfillment_status`
    #  - `source_name`
    #  - `chargeback_status`
    #  - `risk_level`
    #  - `customer_id`
    #  - `email`
    #  - `credit_card_last4`
    #  - `processed_at`
    #  - `checkout_token`
    #  - `cart_token`
    #  - `location_id`
    #  - `channel_id`
    #  - `discount_code`
    #  - `tag`
    #  - `since_id`
    #  - `updated_at`
    #  - `created_at`
    query: String
  ): OrderConnection!
  ordersCount: UnsignedInt64!
  phone: String
  state: CustomerState!
  tags: [String!]!
  taxExempt: Boolean!
  totalSpent: Money!
  updatedAt: DateTime!
  verifiedEmail: Boolean!
}

type CustomerConnection {
  # A list of edges.
  edges: [CustomerEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type CustomerCreatePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  customer: Customer

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

input CustomerDeleteInput {
  clientMutationId: String
  id: ID!
}

type CustomerDeletePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  deletedCustomerId: ID
  shop: Shop!

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

type CustomerEdge {
  cursor: String!
  node: Customer!
}

input CustomerInput {
  clientMutationId: String

  # Specifies the customer to update or create a new customer if absent.
  id: ID
  firstName: String
  lastName: String
  email: String
  phone: String
  tags: [String!]
  acceptsMarketing: Boolean
  taxExempt: Boolean
  note: String
  addresses: [MailingAddressInput!]
}

# The set of valid sort keys for the customers query.
enum CustomerSortKeys {
  NAME
  LOCATION
  ORDERS_COUNT
  LAST_ORDER_DATE
  TOTAL_SPENT
  UPDATED_AT
  ID
  RELEVANCE
}

enum CustomerState {
  INVITED
  DISABLED
  DECLINED
  ENABLED
}

type CustomerUpdatePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  customer: Customer

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

# An ISO-8601 encoded UTC date string.
scalar DateTime

# Represents a web address.
type Domain {
  # The host name of the domain (eg: `example.com`).
  host: String!

  # Whether SSL is enabled or not.
  sslEnabled: Boolean!

  # The URL of the domain (eg: `https://example.com`).
  url: URL!
}

type DraftFulfillment {
  lineItems: [LineItem!]!
  service: FulfillmentService!
}

type DraftOrder implements Node, HasMetafields {
  appliedDiscount: DraftOrderAppliedDiscount
  billingAddress: MailingAddress
  completedAt: DateTime
  createdAt: DateTime!
  currencyCode: CurrencyCode!
  customAttributes: [Attribute!]!
  customer: Customer
  email: String
  id: ID!
  invoiceSentAt: DateTime
  invoiceUrl: URL
  lineItems(first: Int!, after: String, reverse: Boolean = false): DraftOrderLineItemConnection!
  metafield(namespace: String!, key: String!): Metafield
  metafields(first: Int!, after: String, reverse: Boolean = false): MetafieldConnection!
  name: String!
  note: String!
  order: Order
  shippingAddress: MailingAddress
  shippingLine: ShippingLine
  status: DraftOrderStatus!
  subtotalPrice: Money!
  tags: [String!]!

  # Specifies if the draft order is tax exempt.
  taxExempt: Boolean!
  taxLines: [TaxLine!]!

  # Specifies if taxes are included in the line item and shipping line prices.
  taxesIncluded: Boolean!
  totalPrice: Money!
  totalShippingPrice: Money!
  totalTax: Money!
  totalWeight: UnsignedInt64!
  updatedAt: DateTime!
}

type DraftOrderAppliedDiscount {
  amount: Money!
  description: String!
  title: String
  value: Float!
  valueType: DraftOrderAppliedDiscountType!
}

input DraftOrderAppliedDiscountInput {
  description: String
  title: String
  valueType: DraftOrderAppliedDiscountType!
  value: Float!
  amount: Money!
}

enum DraftOrderAppliedDiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

type DraftOrderConnection {
  # A list of edges.
  edges: [DraftOrderEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type DraftOrderCreatePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  draftOrder: DraftOrder

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

input DraftOrderDeleteInput {
  clientMutationId: String
  id: ID!
}

type DraftOrderDeletePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  deletedId: ID

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

type DraftOrderEdge {
  cursor: String!
  node: DraftOrder!
}

input DraftOrderInput {
  clientMutationId: String
  customerId: ID
  note: String
  email: String
  taxExempt: Boolean
  tags: [String!]
  useCustomerDefaultAddress: Boolean
  shippingAddress: MailingAddressInput
  billingAddress: MailingAddressInput
  lineItems: [DraftOrderLineItemInput!]
  shippingLine: ShippingLineInput
  appliedDiscount: DraftOrderAppliedDiscountInput
  metafields: [MetafieldInput!]
  customAttributes: [AttributeInput!]
}

type DraftOrderLineItem implements Node {
  appliedDiscount: DraftOrderAppliedDiscount
  custom: Boolean!
  customAttributes: [Attribute!]!
  discountedTotal: Money!
  discountedUnitPrice: Money!
  fulfillmentService: FulfillmentService!
  grams: Int
  id: ID!

  # Indicates whether the line item represents the puchase of a gift card
  isGiftCard: Boolean!
  name: String!
  originalTotal: Money!
  originalUnitPrice: Money!
  product: Product
  quantity: Int!
  requiresShipping: Boolean!
  sku: String
  taxLines: [TaxLine!]!
  taxable: Boolean!
  title: String!
  totalDiscount: Money!
  variant: ProductVariant
  variantTitle: String
  vendor: String
}

type DraftOrderLineItemConnection {
  # A list of edges.
  edges: [DraftOrderLineItemEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type DraftOrderLineItemEdge {
  cursor: String!
  node: DraftOrderLineItem!
}

input DraftOrderLineItemInput {
  variantId: ID
  quantity: Int!
  appliedDiscount: DraftOrderAppliedDiscountInput
  customAttributes: [AttributeInput!]

  # Ignored when variantId is provided
  title: String

  # Ignored when variantId is provided
  originalUnitPrice: Money

  # Ignored when variantId is provided
  grams: Int

  # Ignored when variantId is provided
  requiresShipping: Boolean

  # Ignored when variantId is provided
  sku: String

  # Ignored when variantId is provided
  taxable: Boolean
}

# The set of valid sort keys for the draft_orders query.
enum DraftOrderSortKeys {
  NUMBER
  UPDATED_AT
  STATUS
  TOTAL_PRICE
  CUSTOMER_NAME
  ID
  RELEVANCE
}

enum DraftOrderStatus {
  OPEN
  INVOICE_SENT
  COMPLETED
}

interface Event {
  appTitle: String
  attributeToApp: Boolean!
  attributeToUser: Boolean!
  createdAt: DateTime!
  criticalAlert: Boolean!

  # Globally unique identifier.
  id: ID!
  message: String!
}

type EventConnection {
  # A list of edges.
  edges: [EventEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type EventEdge {
  cursor: String!
  node: Event!
}

# The set of valid sort keys for the events query.
enum EventSortKeys {
  CREATED_AT
  ID
  RELEVANCE
}

type FailedRequirement {
  action: NavigationItem
  message: String!
}

type Fulfillment implements Node {
  createdAt: DateTime!
  fulfillmentLineItems(first: Int!, after: String, reverse: Boolean = false): FulfillmentLineItemConnection!
  id: ID!
  service: FulfillmentService
  status: FulfillmentStatus!
  totalQuantity: Int!
  trackingInfo(
    # Truncate the array result to this size
    first: Int
  ): [FulfillmentTrackingInfo!]!
  updatedAt: DateTime!
}

type FulfillmentCreatePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  fulfillment: Fulfillment
  order: Order

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

input FulfillmentInput {
  clientMutationId: String
  orderId: ID!
  lineItems: [FulfillmentLineItemInput!]
  trackingNumbers: [String!]
  trackingUrls: [String!]
  trackingCompany: String
  notifyCustomer: Boolean
  shippingMethod: String
}

type FulfillmentLineItem {
  discountedTotal: Money!
  lineItem: LineItem!
  originalTotal: Money!
  quantity: Int
}

type FulfillmentLineItemConnection {
  # A list of edges.
  edges: [FulfillmentLineItemEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type FulfillmentLineItemEdge {
  cursor: String!
  node: FulfillmentLineItem!
}

input FulfillmentLineItemInput {
  id: ID!
  quantity: Int
}

type FulfillmentService {
  id: ID!
  inventoryManagement: Boolean!
  productBased: Boolean!
  serviceName: String!
  shippingMethods: [ShippingMethod!]!
}

enum FulfillmentStatus {
  PENDING
  OPEN
  SUCCESS
  CANCELLED
  ERROR
  FAILURE
}

type FulfillmentTrackingInfo {
  company: String
  number: String
  url: URL
}

interface HasMetafields {
  metafield(namespace: String!, key: String!): Metafield
  metafields(first: Int!, after: String, reverse: Boolean = false): MetafieldConnection!
}

type HomeButton {
  id: String!
  text: String!
  url: URL!
}

interface HomeCard {
  buttons: [HomeButton!]!
  dateRange: String
  dismissMessage: String!
  feedbackOptions: [String!]!
  id: ID!
  image(
    # Image width in pixels between 1 and 2048
    maxWidth: Int

    # Image height in pixels between 1 and 2048
    maxHeight: Int
  ): Image
  layout: HomeCardLayout!
  message: String
  showVote: Boolean!
  title: String!
}

input HomeCardClickInput {
  clientMutationId: String
  id: ID!
  buttonId: String
}

type HomeCardClickPayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

input HomeCardDismissInput {
  clientMutationId: String
  id: ID!
}

type HomeCardDismissPayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

input HomeCardFeedbackInput {
  clientMutationId: String
  id: ID!
  feedback: String
  comment: String
}

type HomeCardFeedbackPayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

input HomeCardInteractionInput {
  clientMutationId: String
  id: ID!
  action: MutationsHomeCardInteractionAction!
}

type HomeCardInteractionPayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

enum HomeCardLayout {
  SIMPLE
  ANNOUNCEMENT
  ACHIEVEMENT
  CONTENT
  LINE_GRAPH
  TABLE
  STACKABLE_TABLE
  QUESTION_SCALE
  QUESTION_DROPDOWN
  COUNTDOWN
  VIDEO
}

input HomeCardUndoDismissInput {
  clientMutationId: String
  id: ID!
}

type HomeCardUndoDismissPayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

input HomeCardViewInput {
  clientMutationId: String
  id: ID!
  position: Int!
}

type HomeCardViewPayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

type HomeContentCard implements HomeCard {
  buttons: [HomeButton!]!
  category: String!
  dateRange: String
  dismissMessage: String!
  feedbackOptions: [String!]!
  id: ID!
  image(
    # Image width in pixels between 1 and 2048
    maxWidth: Int

    # Image height in pixels between 1 and 2048
    maxHeight: Int
  ): Image
  layout: HomeCardLayout!
  message: String
  showVote: Boolean!
  title: String!
  url: URL!
}

type HomeCountdownCard implements HomeCard {
  buttons: [HomeButton!]!
  dateRange: String
  dismissMessage: String!
  endDate: DateTime!
  feedbackOptions: [String!]!
  id: ID!
  image(
    # Image width in pixels between 1 and 2048
    maxWidth: Int

    # Image height in pixels between 1 and 2048
    maxHeight: Int
  ): Image
  layout: HomeCardLayout!
  message: String
  postCountdownMessage: String!
  postCountdownTitle: String!
  showVote: Boolean!
  title: String!
}

type HomeLineGraphCard implements HomeCard {
  buttons: [HomeButton!]!
  dateRange: String
  dismissMessage: String!
  feedbackOptions: [String!]!
  id: ID!
  image(
    # Image width in pixels between 1 and 2048
    maxWidth: Int

    # Image height in pixels between 1 and 2048
    maxHeight: Int
  ): Image
  layout: HomeCardLayout!
  lineGraphData: [HomeLineGraphData!]!
  message: String
  showVote: Boolean!
  title: String!
}

type HomeLineGraphData {
  color: String!
  data: [Int!]!
  lineStyle: String!
  title: String!
  useEndLabels: Boolean!
}

type HomeNotification {
  button: HomeButton
  handle: String!
  message: String
  severity: HomeNotificationSeverity!
  title: String!
}

enum HomeNotificationSeverity {
  TRIAL
  ALERT
  WARNING
  POSITIVE
  INFO
}

type HomeQuestionAnswerChoice {
  label: String!
  value: String!
}

type HomeQuestionCard implements HomeCard {
  answers: [HomeQuestionAnswerChoice!]!
  buttons: [HomeButton!]!
  commentInputLabel: String
  dateRange: String
  dismissMessage: String!
  feedbackOptions: [String!]!
  id: ID!
  image(
    # Image width in pixels between 1 and 2048
    maxWidth: Int

    # Image height in pixels between 1 and 2048
    maxHeight: Int
  ): Image
  layout: HomeCardLayout!
  message: String
  showVote: Boolean!
  title: String!
}

input HomeQuestionCardAnswerInput {
  clientMutationId: String
  id: ID!
  answer: String!
  comments: String
}

type HomeQuestionCardAnswerPayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

type HomeSimpleCard implements HomeCard {
  buttons: [HomeButton!]!
  dateRange: String
  dismissMessage: String!
  feedbackOptions: [String!]!
  id: ID!
  image(
    # Image width in pixels between 1 and 2048
    maxWidth: Int

    # Image height in pixels between 1 and 2048
    maxHeight: Int
  ): Image
  layout: HomeCardLayout!
  message: String
  showVote: Boolean!
  title: String!
}

type HomeTableCard implements HomeCard {
  buttons: [HomeButton!]!
  dateRange: String
  dismissMessage: String!
  feedbackOptions: [String!]!
  headings: [String!]!
  id: ID!
  image(
    # Image width in pixels between 1 and 2048
    maxWidth: Int

    # Image height in pixels between 1 and 2048
    maxHeight: Int
  ): Image
  layout: HomeCardLayout!
  message: String
  showVote: Boolean!
  tableRows: [HomeTableRow!]!
  title: String!
}

type HomeTableRow {
  image(
    # Image width in pixels between 1 and 2048
    maxWidth: Int

    # Image height in pixels between 1 and 2048
    maxHeight: Int
  ): Image
  url: URL
  values: [String!]!
}

type HomeVideoCard implements HomeCard {
  buttons: [HomeButton!]!
  dateRange: String
  dismissMessage: String!
  feedbackOptions: [String!]!
  id: ID!
  image(
    # Image width in pixels between 1 and 2048
    maxWidth: Int

    # Image height in pixels between 1 and 2048
    maxHeight: Int
  ): Image
  layout: HomeCardLayout!
  message: String
  showVote: Boolean!
  title: String!

  # The YouTube URL of the video.
  video: URL!
}

# A string containing HTML code.
scalar HTML

# Represents an image resource.
type Image {
  # A word or phrase to share the nature or contents of an image.
  altText: String

  # A unique identifier for the image.
  id: ID

  # The location of the image as a URL.
  src: URL!
}

type ImageConnection {
  # A list of edges.
  edges: [ImageEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type ImageEdge {
  cursor: String!
  node: Image!
}

input ImageInput {
  id: ID

  # The URL of the image. May be a signed upload URL.
  src: String
  altText: String
}

input InventoryAdjustQuantityInput {
  clientMutationId: String
  inventoryLevelId: ID!
  availableDelta: Int!
}

type InventoryAdjustQuantityPayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  inventoryLevel: InventoryLevel

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

type InventoryItem implements Node {
  id: ID!
  inventoryLevels(first: Int!, after: String, reverse: Boolean = false): InventoryLevelConnection!
}

type InventoryLevel implements Node {
  available: Int!
  id: ID!
  item: InventoryItem!
  location: Location!
}

type InventoryLevelConnection {
  # A list of edges.
  edges: [InventoryLevelEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type InventoryLevelEdge {
  cursor: String!
  node: InventoryLevel!
}

type LineItem implements Node {
  canRestock: Boolean!
  customAttributes: [Attribute!]!
  discountedTotal: Money!
  discountedUnitPrice: Money!
  fulfillableQuantity: Int!
  fulfillmentService: FulfillmentService!
  fulfillmentStatus: String!
  id: ID!
  image(
    # Image width in pixels between 1 and 2048
    maxWidth: Int

    # Image height in pixels between 1 and 2048
    maxHeight: Int

    # If specified, crop the image keeping the specified region
    crop: CropRegion

    # Image size multiplier retina displays. Must be between 1 and 3
    scale: Int = 1
  ): Image
  name: String!
  originalTotal: Money!
  originalUnitPrice: Money!
  product: Product
  quantity: Int!
  refundableQuantity: Int!
  requiresShipping: Boolean!
  sku: String
  taxLines(
    # Truncate the array result to this size
    first: Int
  ): [TaxLine!]!
  taxable: Boolean!
  title: String!
  totalDiscount: Money!
  unfulfilledDiscountedTotal: Money!
  unfulfilledOriginalTotal: Money!
  unfulfilledQuantity: Int!
  variant: ProductVariant
  variantTitle: String
  vendor: String
}

type LineItemConnection {
  # A list of edges.
  edges: [LineItemEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type LineItemEdge {
  cursor: String!
  node: LineItem!
}

type Location implements Node {
  address: LocationAddress!
  fulfillmentService: FulfillmentService
  id: ID!
  inventoryLevel(inventoryItemId: ID!): InventoryLevel
  inventoryLevels(first: Int!, after: String, reverse: Boolean = false): InventoryLevelConnection!
  isPrimary: Boolean!
  name: String!
}

type LocationAddress {
  address1: String
  address2: String
  city: String
  country: String
  countryCode: String
  formatted: [String!]!
  latitude: Float
  longitude: Float
  phone: String
  province: String
  provinceCode: String
  zip: String
}

type LocationConnection {
  # A list of edges.
  edges: [LocationEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type LocationEdge {
  cursor: String!
  node: Location!
}

# The set of valid sort keys for the locations query.
enum LocationSortKeys {
  NAME
  ID
  RELEVANCE
}

type MailingAddress implements Node {
  address1: String
  address2: String
  city: String
  company: String
  country: String
  countryCode: String
  firstName: String
  formatted(withName: Boolean = false, withCompany: Boolean = true): [String!]!
  formattedArea: String!
  id: ID!
  lastName: String
  latitude: Float
  longitude: Float
  name: String
  phone: String
  province: String
  provinceCode: String
  zip: String
}

input MailingAddressInput {
  # Specifies the address to update or create a new address if absent.
  id: ID
  address1: String
  address2: String
  city: String
  company: String
  country: String
  firstName: String
  lastName: String
  phone: String
  province: String
  zip: String
}

type MarketingAttribution {
  campaign: String
  content: String
  marketingEvent: MarketingEvent
  medium: String
  source: String
  term: String
}

type MarketingEvent implements Node {
  app: App!
  endedAt: DateTime
  id: ID!
  manageUrl: URL
  previewUrl: URL
  remoteId: String
  scheduledToEndAt: DateTime
  startedAt: DateTime!
  targetTypeDisplayText: String!
  utmCampaign: String
  utmMedium: String
  utmSource: String
}

type Metafield implements Node {
  description: String
  id: ID!
  key: String!
  namespace: String!
  value: String!
  valueType: MetafieldValueType!
}

type MetafieldConnection {
  # A list of edges.
  edges: [MetafieldEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

input MetafieldDeleteInput {
  clientMutationId: String
  id: ID!
}

type MetafieldDeletePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  deletedId: ID

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

type MetafieldEdge {
  cursor: String!
  node: Metafield!
}

input MetafieldInput {
  id: ID
  namespace: String
  key: String
  value: String
  valueType: MetafieldValueType
  description: String
}

enum MetafieldValueType {
  STRING
  INTEGER
}

type MobileDevice implements Node {
  badgeEnabled: Boolean!
  id: ID!
  notificationSubscriptions: [NotificationSubscription!]!
}

input MobileDeviceRegisterInput {
  clientMutationId: String
  id: ID
  token: String!
  name: String!
  snsPlatformApplication: String
  badgeEnabled: Boolean
  identifier: String
}

type MobileDeviceRegisterPayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  mobileDevice: MobileDevice

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

input MobileDeviceUnregisterInput {
  clientMutationId: String
  id: ID!
}

type MobileDeviceUnregisterPayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

input MobileTokenDeleteInput {
  clientMutationId: String
  tokenFingerprint: String!
}

type MobileTokenDeletePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  deletedMobileDeviceId: ID

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

# A monetary value string.
scalar Money

type Mutation {
  adminPasswordlessLogin(input: AdminGenerateLoginTokenInput!): AdminGenerateLoginTokenPayload
  appInstall(input: AppInstallInput!): AppInstallPayload
  appStoreUrlGenerate: AppStoreUrlGeneratePayload
  appUninstall(input: AppUninstallInput!): AppUninstallPayload
  collectionAddProducts(id: ID!, productIds: [ID!]!): CollectionAddProductsPayload
  collectionCreate(input: CollectionInput!): CollectionCreatePayload
  collectionDelete(input: CollectionDeleteInput!): CollectionDeletePayload
  collectionPublish(input: CollectionPublishInput!): CollectionPublishPayload
  collectionUnpublish(input: CollectionUnpublishInput!): CollectionUnpublishPayload
  collectionUpdate(input: CollectionInput!): CollectionUpdatePayload
  customerCreate(input: CustomerInput!): CustomerCreatePayload
  customerDelete(input: CustomerDeleteInput!): CustomerDeletePayload
  customerUpdate(input: CustomerInput!): CustomerUpdatePayload
  draftOrderCreate(input: DraftOrderInput!): DraftOrderCreatePayload
  draftOrderDelete(input: DraftOrderDeleteInput!): DraftOrderDeletePayload
  fulfillmentCreate(input: FulfillmentInput!): FulfillmentCreatePayload
  homeCardClick(input: HomeCardClickInput!): HomeCardClickPayload
  homeCardDismiss(input: HomeCardDismissInput!): HomeCardDismissPayload @deprecated(reason: "Use `HomeCardInteraction` with an action instead")
  homeCardFeedback(input: HomeCardFeedbackInput!): HomeCardFeedbackPayload
  homeCardInteraction(input: HomeCardInteractionInput!): HomeCardInteractionPayload
  homeCardUndoDismiss(input: HomeCardUndoDismissInput!): HomeCardUndoDismissPayload @deprecated(reason: "Use `HomeCardInteraction` with an action instead")
  homeCardView(input: HomeCardViewInput!): HomeCardViewPayload
  homeQuestionCardAnswer(input: HomeQuestionCardAnswerInput!): HomeQuestionCardAnswerPayload
  inventoryAdjustQuantity(input: InventoryAdjustQuantityInput!): InventoryAdjustQuantityPayload
  metafieldDelete(input: MetafieldDeleteInput!): MetafieldDeletePayload
  mobileDeviceRegister(input: MobileDeviceRegisterInput!): MobileDeviceRegisterPayload
  mobileDeviceUnregister(input: MobileDeviceUnregisterInput!): MobileDeviceUnregisterPayload
  mobileTokenDelete(input: MobileTokenDeleteInput!): MobileTokenDeletePayload
  notificationSubscriptionUpdate(input: NotificationSubscriptionInput!): NotificationSubscriptionUpdatePayload
  orderCapture(input: OrderCaptureInput!): OrderCapturePayload
  orderClose(input: OrderCloseInput!): OrderClosePayload
  orderMarkAsPaid(input: OrderMarkAsPaidInput!): OrderMarkAsPaidPayload
  orderOpen(input: OrderOpenInput!): OrderOpenPayload
  orderUpdate(input: OrderInput!): OrderUpdatePayload
  productAppendImages(input: ProductAppendImagesInput!): ProductAppendImagesPayload
  productCreate(input: ProductInput!): ProductCreatePayload
  productDelete(input: ProductDeleteInput!): ProductDeletePayload
  productPublish(input: ProductPublishInput!): ProductPublishPayload
  productUnpublish(input: ProductUnpublishInput!): ProductUnpublishPayload
  productUpdate(input: ProductInput!): ProductUpdatePayload
  productVariantCreate(input: ProductVariantInput!): ProductVariantCreatePayload
  productVariantUpdate(input: ProductVariantInput!): ProductVariantUpdatePayload
  refundCreate(input: RefundInput!): RefundCreatePayload
  stagedUploadTargetGenerate(input: StagedUploadTargetGenerateInput!): StagedUploadTargetGeneratePayload
  storefrontAccessTokenCreate(input: StorefrontAccessTokenInput!): StorefrontAccessTokenCreatePayload
  storefrontAccessTokenDelete(input: StorefrontAccessTokenDeleteInput!): StorefrontAccessTokenDeletePayload
  timelineCommentCreate(input: TimelineCommentCreateInput!): TimelineCommentCreatePayload
  timelineCommentDelete(input: TimelineCommentDeleteInput!): TimelineCommentDeletePayload
  timelineCommentEdit(input: TimelineCommentEditInput!): TimelineCommentEditPayload
}

enum MutationsHomeCardInteractionAction {
  DISMISS
  UNDO_DISMISS
  CLICK
  UPVOTE
  DOWNVOTE
}

type MutationsStagedUploadTargetGenerateUploadParameter {
  name: String!
  value: String!
}

type NavigationItem {
  id: String!
  title: String!
  url: URL!
}

# An object with an ID to support global identification.
interface Node {
  # Globally unique identifier.
  id: ID!
}

type NotificationSubscription {
  enabled: Boolean!
  id: ID!
  title: String!
  type: String!
}

input NotificationSubscriptionInput {
  clientMutationId: String
  id: ID!
  enabled: Boolean!
}

type NotificationSubscriptionUpdatePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  notificationSubscription: NotificationSubscription

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

type Order implements Node, CommentEventSubject {
  billingAddress: MailingAddress
  billingAddressMatchesShippingAddress: Boolean!
  buyerAcceptsMarketing: Boolean!
  canMarkAsPaid: Boolean!
  cancelReason: OrderCancelReason
  cancelledAt: DateTime
  capturable: Boolean!
  cartDiscountAmount: Money
  channel: Channel
  closed: Boolean!
  closedAt: DateTime
  confirmed: Boolean!
  createdAt: DateTime!
  currencyCode: CurrencyCode!
  customAttributes: [Attribute!]!
  customer: Customer
  discountCode: String
  displayAddress: MailingAddress
  displayFinancialStatus: OrderDisplayFinancialStatus
  displayFulfillmentStatus: OrderDisplayFulfillmentStatus!
  draftFulfillments: [DraftFulfillment!]!
  email: String
  events(
    first: Int!
    after: String
    sortKey: EventSortKeys = ID
    reverse: Boolean = false

    # Supported filter parameters:
    #  - `created_at`
    #  - `comments`
    query: String
  ): EventConnection!
  fulfillable: Boolean!
  fulfillments(
    # Truncate the array result to this size
    first: Int
  ): [Fulfillment!]!
  fullyPaid: Boolean!
  hasTimelineComment: Boolean!
  id: ID!
  landingPageDisplayText: String
  landingPageUrl: URL
  lineItems(first: Int!, after: String, reverse: Boolean = false): LineItemConnection!
  location: String @deprecated(reason: "Use `physicalLocation` instead")
  marketingAttribution: MarketingAttribution
  name: String!
  netPayment: Money!
  note: String
  paymentGatewayNames: [String!]!
  phone: String
  physicalLocation: Location
  processedAt: DateTime!
  referralCode: String
  referrerDisplayText: String
  referrerUrl: URL
  refundable: Boolean!
  refunds(
    # Truncate the array result to this size
    first: Int
  ): [Refund!]!
  requiresShipping: Boolean!
  riskAssessments: [RiskAssessment!]! @deprecated(reason: "awaiting api finialization")
  riskIndicators: [OrderRiskIndicator!]! @deprecated(reason: "Use `riskAssessments` instead")
  riskLevel: OrderRiskLevel!
  risks(
    # Truncate the array result to this size
    first: Int
  ): [OrderRisk!]!
  shippingAddress: MailingAddress
  shippingLine: ShippingLine
  subtotalPrice: Money
  suggestedRefund(shippingAmount: Money, refundShipping: Boolean, refundLineItems: [RefundLineItemInput!]): SuggestedRefund
  tags: [String!]!
  taxLines: [TaxLine!]!
  taxesIncluded: Boolean!
  test: Boolean!
  totalCapturable: Money!
  totalDiscounts: Money
  totalPrice: Money!
  totalReceived: Money!
  totalRefunded: Money!
  totalShippingPrice: Money!
  totalTax: Money
  totalWeight: UnsignedInt64
  transactions(
    capturable: Boolean
    manuallyResolvable: Boolean

    # Truncate the array result to this size
    first: Int
  ): [OrderTransaction!]!
  unpaid: Boolean!
  updatedAt: DateTime!
}

enum OrderCancelReason {
  CUSTOMER
  FRAUD
  INVENTORY
  DECLINED
  OTHER
}

input OrderCaptureInput {
  clientMutationId: String
  id: ID!
  parentTransactionId: ID!
  amount: Money!
}

type OrderCapturePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  transaction: OrderTransaction

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

input OrderCloseInput {
  clientMutationId: String
  id: ID!
}

type OrderClosePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  order: Order

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

type OrderConnection {
  # A list of edges.
  edges: [OrderEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

enum OrderDisplayFinancialStatus {
  PENDING
  AUTHORIZED
  PARTIALLY_PAID
  PARTIALLY_REFUNDED
  PAID
  REFUNDED
  VOIDED
}

enum OrderDisplayFulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  RESTOCKED
  PENDING_FULFILLMENT
  OPEN
}

type OrderEdge {
  cursor: String!
  node: Order!
}

input OrderInput {
  clientMutationId: String
  email: String
  id: ID!
  note: String
  tags: [String!]
  shippingAddress: MailingAddressInput
}

input OrderMarkAsPaidInput {
  clientMutationId: String
  id: ID!
}

type OrderMarkAsPaidPayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  order: Order

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

input OrderOpenInput {
  clientMutationId: String
  id: ID!
}

type OrderOpenPayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  order: Order

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

type OrderRisk {
  display: Boolean!
  level: OrderRiskLevel
  message: String
}

# An OrderRiskIndicator represents a factor related to the orders assessed risk
type OrderRiskIndicator {
  key: String!
  message: String!
  sentiment: OrderRiskIndicatorSentiment!
}

enum OrderRiskIndicatorSentiment {
  # A risk indicator with a negative sentiment
  NEGATIVE

  # A risk indicator with a neutral sentiment
  NEUTRAL

  # A risk indicator with a positive sentiment
  POSITIVE
}

enum OrderRiskLevel {
  LOW
  MEDIUM
  HIGH
}

# The set of valid sort keys for the orders query.
enum OrderSortKeys {
  ORDER_NUMBER
  CREATED_AT
  UPDATED_AT
  FINANCIAL_STATUS
  FULFILLMENT_STATUS
  TOTAL_PRICE
  CUSTOMER_NAME
  PROCESSED_AT
  ID
  RELEVANCE
}

type OrderTransaction implements Node {
  accountNumber: String
  amount: Money!
  formattedGateway: String
  gateway: String
  id: ID!
  kind: OrderTransactionKind!
  manuallyCapturable: Boolean

  # Specifies the available amount to refund on the gateway. Only available within SuggestedRefund.
  maximumRefundable: Money
  order: Order
  parentTransaction: OrderTransaction

  # Specifies the payment icon to display for this transaction.
  paymentIcon(
    # Image width in pixels between 1 and 2048
    maxWidth: Int

    # Image height in pixels between 1 and 2048
    maxHeight: Int

    # If specified, crop the image keeping the specified region
    crop: CropRegion

    # Image size multiplier retina displays. Must be between 1 and 3
    scale: Int = 1
  ): Image

  # Specifies the credit card company used to pay for this transaction
  paymentMethod: PaymentMethods @deprecated(reason: "Use `paymentIcon` instead")

  # Specifies the available amount to capture on the gateway. Only available when
  # an amount is capturable or manually mark as paid.
  totalUnsettled: Money
}

type OrderTransactionConnection {
  # A list of edges.
  edges: [OrderTransactionEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type OrderTransactionEdge {
  cursor: String!
  node: OrderTransaction!
}

input OrderTransactionInput {
  orderId: ID!
  parentId: ID!
  kind: OrderTransactionKind!
  gateway: String!
  amount: Money!
}

enum OrderTransactionKind {
  SALE
  CAPTURE
  AUTHORIZATION
  VOID
  REFUND
  CHANGE
  EMV_AUTHORIZATION
  SUGGESTED_REFUND
}

type OrderUpdatePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  order: Order

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

# Information about pagination in a connection.
type PageInfo {
  # Indicates if there are more pages to fetch.
  hasNextPage: Boolean!

  # Indicates if there are any pages prior to the current page.
  hasPreviousPage: Boolean!
}

# List of payment methods used in Shopify
enum PaymentMethods {
  VISA
  MASTERCARD
  DISCOVER
  AMERICAN_EXPRESS
  DINERS_CLUB
  JCB
  DANKORT
  MAESTRO
  FORBRUGSFORENINGEN
  PAYPAL
  BOGUS
  BITCOIN
  LITECOIN
  DOGECOIN
}

type Product implements Node, HasMetafields {
  bodyHtml: String @deprecated(reason: "Use `descriptionHtml` instead")
  collections(
    first: Int!
    after: String
    sortKey: CollectionSortKeys = ID
    reverse: Boolean = false

    # Supported filter parameters:
    #  - `title`
    #  - `collection_type`
    #  - `updated_at`
    #  - `published_status`
    query: String
  ): CollectionConnection!
  createdAt: DateTime!

  # Stripped description of the product, single line with HTML tags removed.
  description(
    # Truncates string after the given length.
    truncateAt: Int
  ): String!

  # The description of the product, complete with HTML formatting.
  descriptionHtml: HTML!

  # Stripped description of the product, single line with HTML tags removed.
  # Truncated to 60 characters.
  #
  descriptionPlainSummary: String! @deprecated(reason: "Use `description` instead")
  feedback: ResourceFeedback
  handle: String!
  hasOutOfStockVariants: Boolean!
  id: ID!
  images(
    first: Int!
    after: String
    reverse: Boolean = false

    # Image width in pixels between 1 and 2048
    maxWidth: Int

    # Image height in pixels between 1 and 2048
    maxHeight: Int

    # If specified, crop the image keeping the specified region
    crop: CropRegion

    # Image size multiplier retina displays. Must be between 1 and 3
    scale: Int = 1
  ): ImageConnection!
  isGiftCard: Boolean!
  metafield(namespace: String!, key: String!): Metafield
  metafields(first: Int!, after: String, reverse: Boolean = false): MetafieldConnection!
  options(
    # Truncate the array result to this size
    first: Int
  ): [ProductOption!]!
  productPublications(first: Int!, after: String, reverse: Boolean = false): ProductPublicationConnection! @deprecated(reason: "Use `publications` instead")
  productType: String!
  publications(first: Int!, after: String, reverse: Boolean = false): ProductPublicationConnection!
  publishedAt: DateTime
  tags: [String!]!
  templateSuffix: String
  title: String!
  totalInventory: Int!
  totalVariants: Int!
  tracksInventory: Boolean!
  updatedAt: DateTime!
  variants(first: Int!, after: String, reverse: Boolean = false): ProductVariantConnection!
  vendor: String!
}

input ProductAppendImagesInput {
  clientMutationId: String
  id: ID!
  images: [ImageInput!]!
}

type ProductAppendImagesPayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  product: Product

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

type ProductConnection {
  # A list of edges.
  edges: [ProductEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type ProductCreatePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  product: Product
  shop: Shop!

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

input ProductDeleteInput {
  clientMutationId: String
  id: ID!
}

type ProductDeletePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  deletedProductId: ID
  shop: Shop!

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

type ProductEdge {
  cursor: String!
  node: Product!
}

input ProductInput {
  clientMutationId: String

  # Specifies the product to update or create a new product if absent.
  id: ID
  bodyHtml: String
  descriptionHtml: String
  handle: String
  images: [ImageInput!]
  productType: String
  publishOn: DateTime
  published: Boolean
  publishedAt: DateTime
  publishDate: DateTime
  templateSuffix: String
  title: String
  vendor: String
  collectionsToJoin: [ID!]
  collectionsToLeave: [ID!]
  tags: [String!]
  options: [String!]
  variants: [ProductVariantInput!]
  metafields: [MetafieldInput!]
  productPublications: [ProductPublicationInput!]
  publications: [ProductPublicationInput!]
}

type ProductOption implements Node {
  id: ID!
  name: String!
  position: Int!
  values: [String!]!
}

type ProductPublication {
  channel: Channel!
  product: Product!
}

type ProductPublicationConnection {
  # A list of edges.
  edges: [ProductPublicationEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type ProductPublicationEdge {
  cursor: String!
  node: ProductPublication!
}

input ProductPublicationInput {
  channelHandle: String!
}

input ProductPublishInput {
  clientMutationId: String

  # The product to create or update publications for.
  id: ID!
  productPublications: [ProductPublicationInput!]!
}

type ProductPublishPayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  productPublications: [ProductPublication!]
  shop: Shop!

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

# The set of valid sort keys for the products query.
enum ProductSortKeys {
  TITLE
  PRODUCT_TYPE
  VENDOR
  INVENTORY_TOTAL
  UPDATED_AT
  CREATED_AT
  PUBLISHED_AT
  ID
  RELEVANCE
}

input ProductUnpublishInput {
  clientMutationId: String

  # The product to create or update publications for.
  id: ID!
  productPublications: [ProductPublicationInput!]!
}

type ProductUnpublishPayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  shop: Shop!

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

type ProductUpdatePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  product: Product

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

type ProductVariant implements Node, HasMetafields {
  # Indicates if the product variant is available for sale.
  availableForSale: Boolean!
  barcode: String
  compareAtPrice: Money
  createdAt: DateTime!
  fulfillmentService: FulfillmentService
  harmonizedSystemCode: String
  id: ID!
  image(
    # Image width in pixels between 1 and 2048
    maxWidth: Int

    # Image height in pixels between 1 and 2048
    maxHeight: Int

    # If specified, crop the image keeping the specified region
    crop: CropRegion

    # Image size multiplier retina displays. Must be between 1 and 3
    scale: Int = 1
  ): Image
  images(
    # Truncate the array result to this size
    first: Int

    # Image width in pixels between 1 and 2048
    maxWidth: Int

    # Image height in pixels between 1 and 2048
    maxHeight: Int

    # If specified, crop the image keeping the specified region
    crop: CropRegion

    # Image size multiplier retina displays. Must be between 1 and 3
    scale: Int = 1
  ): [Image!]! @deprecated(reason: "Use the singular `image` field instead. There may never be more than one variant image.")
  inventoryItem: InventoryItem!
  inventoryManagement: ProductVariantInventoryManagement!
  inventoryPolicy: ProductVariantInventoryPolicy!

  # Total sellable quantity of the variant
  inventoryQuantity: Int
  metafield(namespace: String!, key: String!): Metafield
  metafields(first: Int!, after: String, reverse: Boolean = false): MetafieldConnection!
  position: Int!
  price: Money!
  product: Product!
  requiresShipping: Boolean!
  selectedOptions: [SelectedOption!]!
  sku: String
  taxable: Boolean!
  title: String!
  updatedAt: DateTime!
  weight: Float
  weightUnit: WeightUnit!
}

type ProductVariantConnection {
  # A list of edges.
  edges: [ProductVariantEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type ProductVariantCreatePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  product: Product
  productVariant: ProductVariant

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

type ProductVariantEdge {
  cursor: String!
  node: ProductVariant!
}

input ProductVariantInput {
  clientMutationId: String

  # Specifies the product variant to update or create a new variant if absent.
  id: ID

  # Create only required field. Specifies the product on which to create the variant.
  productId: ID
  barcode: String
  compareAtPrice: Money
  fulfillmentServiceId: ID
  harmonizedSystemCode: String
  imageId: ID
  inventoryManagement: ProductVariantInventoryManagement
  inventoryPolicy: ProductVariantInventoryPolicy

  # Create only field. Use inventory_quantity_adjustment for updates.
  inventoryQuantity: Int

  # Deprecated: Use the `inventoryAdjustQuantity` mutation instead
  inventoryQuantityAdjustment: Int
  options: [String!]
  position: Int
  price: Money
  requiresShipping: Boolean
  sku: String
  taxable: Boolean
  title: String
  taxCode: String
  weight: Float
  weightUnit: WeightUnit
  metafields: [MetafieldInput!]
}

enum ProductVariantInventoryManagement {
  SHOPIFY
  NOT_MANAGED
  FULFILLMENT_SERVICE
}

enum ProductVariantInventoryPolicy {
  DENY
  CONTINUE
}

# The set of valid sort keys for the product_variants query.
enum ProductVariantSortKeys {
  TITLE
  NAME
  SKU
  INVENTORY_QUANTITY
  INVENTORY_MANAGEMENT
  INVENTORY_POLICY
  FULL_TITLE
  POPULAR
  ID
  RELEVANCE
}

type ProductVariantUpdatePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  product: Product
  productVariant: ProductVariant

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

# The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start.
type QueryRoot {
  blog(id: ID!): Blog
  blogArticle(id: ID!): BlogArticle
  collection(id: ID!): Collection
  customer(id: ID!): Customer
  draftOrder(id: ID!): DraftOrder
  fulfillment(id: ID!): Fulfillment
  inventoryItem(id: ID!): InventoryItem
  location(
    # The ID of the location to return. If no ID is provided, the primary location of the Shop is returned.
    id: ID
  ): Location
  marketingEvent(id: ID!): MarketingEvent
  node(id: ID!): Node
  order(id: ID!): Order
  product(id: ID!): Product
  productVariant(id: ID!): ProductVariant
  refund(id: ID!): Refund
  shop: Shop!
  staffMember(
    # The ID of the staff account to return. If no ID is provided, the staff account making the query (if any) is returned.
    id: ID
  ): StaffMember
  storefrontPage(id: ID!): StorefrontPage
}

type Refund implements Node {
  createdAt: DateTime
  id: ID!
  note: String
  refundLineItems(first: Int!, after: String, reverse: Boolean = false): RefundLineItemConnection!
  restocked: Boolean!
  staffMember: StaffMember
  transactions(first: Int!, after: String, reverse: Boolean = false): OrderTransactionConnection!
  updatedAt: DateTime!
}

type RefundCreatePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  order: Order
  refund: Refund

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

input RefundInput {
  clientMutationId: String
  orderId: ID!
  restock: Boolean
  note: String
  userId: ID
  notify: Boolean
  shipping: ShippingRefundInput
  refundLineItems: [RefundLineItemInput!]
  transactions: [OrderTransactionInput!]
}

type RefundLineItem {
  lineItem: LineItem!
  price: Money!
  quantity: Int!
  subtotal: Money!
  totalTax: Money!
}

type RefundLineItemConnection {
  # A list of edges.
  edges: [RefundLineItemEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type RefundLineItemEdge {
  cursor: String!
  node: RefundLineItem!
}

input RefundLineItemInput {
  lineItemId: ID!
  quantity: Int!
}

type ResourceFeedback {
  appFeedback: [AppFeedback!]
  summary: String!
}

enum ResourceLocation {
  INDEX
  ACTION
  SHOW
}

enum ResourceType {
  ORDERS
  DRAFT_ORDERS
  PRODUCTS
  VARIANTS
  PAGES
  BLOGS
  ARTICLES
  CUSTOMERS
  CHECKOUTS
  DISCOUNTS
}

# A risk assessment is an order's composite risk plus risk factorsfor a given source of risk analysis.
type RiskAssessment {
  level: OrderRiskLevel!
  riskFactors: [RiskFactor!]!
  source: String!
}

# A risk factor is a contributor to the recommendation of an order's risk assessment.
type RiskFactor {
  level: OrderRiskLevel!
  message: String!
}

type SavedSearch implements Node {
  id: ID!
  name: String!
  query: String!
}

type SavedSearchConnection {
  # A list of edges.
  edges: [SavedSearchEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type SavedSearchEdge {
  cursor: String!
  node: SavedSearch!
}

type SearchResult {
  description: String
  image: Image
  reference: Node!
  title: String!
  url: URL!
}

type SearchResultConnection {
  edges: [SearchResultEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  resultsAfterCount: Int!
}

type SearchResultEdge {
  cursor: String!
  node: SearchResult!
}

type SelectedOption {
  name: String!
  value: String!
}

type ShippingLine {
  custom: Boolean!
  price: Money!
  shippingRateHandle: String
  title: String!
}

input ShippingLineInput {
  title: String
  price: Money
  shippingRateHandle: String
}

type ShippingMethod {
  code: String!
  label: String!
}

type ShippingRefund {
  amount: Money!
  maximumRefundable: Money!
  tax: Money!
}

input ShippingRefundInput {
  amount: Money
  fullRefund: Boolean
}

type Shop implements Node {
  analyticsToken: String!
  appLinks(type: ResourceType, location: ResourceLocation): [AppLink!]!

  # An app store URL to auto-authenticate the shop
  appStoreUrl: URL! @deprecated(reason: "Use AppStoreUrlGenerate mutation instead")
  availableChannelApps(first: Int!, after: String, reverse: Boolean = false): AppConnection!
  billingAddress: MailingAddress!
  channelByHandle(handle: String!): Channel
  channels(first: Int!, after: String, reverse: Boolean = false): ChannelConnection!
  collectionByHandle(handle: String!): Collection
  collectionSavedSearches(first: Int!, after: String, reverse: Boolean = false): SavedSearchConnection!
  collections(
    first: Int!
    after: String
    sortKey: CollectionSortKeys = ID
    reverse: Boolean = false

    # Supported filter parameters:
    #  - `title`
    #  - `collection_type`
    #  - `updated_at`
    #  - `published_status`
    query: String
  ): CollectionConnection!
  currency: String! @deprecated(reason: "Use `currencyCode` instead")
  currencyCode: CurrencyCode!
  customerAccounts: ShopCustomerAccountsSetting!
  customerSavedSearches(first: Int!, after: String, reverse: Boolean = false): SavedSearchConnection!
  customerTags(first: Int!): StringConnection!
  customers(
    first: Int!
    after: String
    sortKey: CustomerSortKeys = ID
    reverse: Boolean = false

    # Supported filter parameters:
    #  - `total_spent`
    #  - `orders_count`
    #  - `order_date`
    #  - `accepts_marketing`
    #  - `last_abandoned_order_date`
    #  - `state`
    #  - `country`
    #  - `email`
    #  - `phone`
    #  - `customer_date`
    #  - `updated_at`
    #  - `tag`
    query: String
  ): CustomerConnection!
  description: String
  draftOrders(
    first: Int!
    after: String
    sortKey: DraftOrderSortKeys = ID
    reverse: Boolean = false

    # Supported filter parameters:
    #  - `status`
    #  - `updated_at`
    #  - `customer_id`
    #  - `created_at`
    #  - `tag`
    query: String
  ): DraftOrderConnection!
  email: String!
  features: ShopFeatures!
  fulfillmentServices: [FulfillmentService!]!
  ianaTimezone: String!
  id: ID!
  installedApps(first: Int!, after: String, reverse: Boolean = false): AppConnection!
  locations(
    first: Int!
    after: String
    sortKey: LocationSortKeys = NAME
    reverse: Boolean = false

    # Supported filter parameters:
    #  - `name`
    #  - `address1`
    #  - `address2`
    #  - `city`
    #  - `zip`
    #  - `province`
    #  - `country`
    query: String
  ): LocationConnection!
  myshopifyDomain: String!
  name: String!
  navigationSettings: [NavigationItem!]!
  orderSavedSearches(first: Int!, after: String, reverse: Boolean = false): SavedSearchConnection!
  orderTags(first: Int!): StringConnection!
  orders(
    first: Int!
    after: String
    sortKey: OrderSortKeys = PROCESSED_AT
    reverse: Boolean = false

    # Supported filter parameters:
    #  - `status`
    #  - `financial_status`
    #  - `fulfillment_status`
    #  - `source_name`
    #  - `chargeback_status`
    #  - `risk_level`
    #  - `customer_id`
    #  - `email`
    #  - `credit_card_last4`
    #  - `processed_at`
    #  - `checkout_token`
    #  - `cart_token`
    #  - `location_id`
    #  - `channel_id`
    #  - `discount_code`
    #  - `tag`
    #  - `since_id`
    #  - `updated_at`
    #  - `created_at`
    query: String
  ): OrderConnection!
  pendingOrderCount: Int!
  primaryDomain: Domain!
  productByHandle(handle: String!): Product
  productSavedSearches(first: Int!, after: String, reverse: Boolean = false): SavedSearchConnection!
  productTags(first: Int!): StringConnection!
  productTypes(first: Int!): StringConnection!
  productVariants(
    first: Int!
    after: String
    sortKey: ProductVariantSortKeys = ID
    reverse: Boolean = false

    # Supported filter parameters:
    #  - `title`
    #  - `product_type`
    #  - `vendor`
    #  - `managed`
    #  - `managed_by`
    #  - `inventory_quantity`
    #  - `product_id`
    #  - `collection`
    #  - `gift_card`
    #  - `published_status`
    #  - `tag`
    query: String
  ): ProductVariantConnection!
  productVendors(first: Int!): StringConnection!
  products(
    first: Int!
    after: String
    sortKey: ProductSortKeys = ID
    reverse: Boolean = false

    # Supported filter parameters:
    #  - `title`
    #  - `product_type`
    #  - `vendor`
    #  - `gift_card`
    #  - `sku`
    #  - `barcode`
    #  - `inventory_total`
    #  - `created_at`
    #  - `updated_at`
    #  - `published_status`
    #  - `tag`
    #  - `error_feedback`
    query: String
  ): ProductConnection!
  richTextEditorUrl: URL!
  search(first: Int!, after: String, query: String!, types: [ShopSearchClassType!]): SearchResultConnection!
  setupRequired: Boolean!
  staffMembers(first: Int!, after: String, reverse: Boolean = false): StaffMemberConnection!
  storefrontAccessTokens(first: Int!, after: String, reverse: Boolean = false): StorefrontAccessTokenConnection!
  storefrontUrl: URL!

  # Specifies whether or not taxes are charged for shipping.
  taxShipping: Boolean!

  # The setting for whether applicable taxes are included in product prices.
  taxesIncluded: Boolean!
  weightUnit: WeightUnit!
}

enum ShopCustomerAccountsSetting {
  REQUIRED
  OPTIONAL
  DISABLED
}

type ShopFeatures {
  financialReports: Boolean!

  # Display Harmonized System codes on products.  Used for customs when shipping cross-border.
  harmonizedSystemCode: Boolean!
  shopifyPlus: Boolean!

  # Whether to show metrics. Metrics are hidden for new merchants until they become meaningful.
  showMetrics: Boolean!
  storefront: Boolean!
}

enum ShopSearchClassType {
  ORDER
  CUSTOMER
  PRODUCT
  STOREFRONT_PAGE
  BLOG
  BLOG_ARTICLE
  COLLECTION
}

type StaffMember implements Node {
  avatar(
    # Image width in pixels between 1 and 2048
    maxWidth: Int

    # Image height in pixels between 1 and 2048
    maxHeight: Int
  ): Image!
  email: String!
  exists: Boolean!
  firstName: String
  id: ID!
  lastName: String
  name: String!
  phone: String
  privateData: StaffMemberPrivateData!
}

type StaffMemberConnection {
  # A list of edges.
  edges: [StaffMemberEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type StaffMemberEdge {
  cursor: String!
  node: StaffMember!
}

enum StaffMemberPermission {
  APPLICATIONS
  CHANNELS
  CUSTOMERS
  DASHBOARD
  DOMAINS
  DRAFT_ORDERS
  GIFT_CARDS
  LINKS
  LOCATIONS
  MARKETING
  ORDERS
  OVERVIEWS
  PAGES
  PREFERENCES
  PRODUCTS
  REPORTS
  THEMES
  FULL
  LIMITED
}

type StaffMemberPrivateData {
  cards(acceptLayout: [HomeCardLayout!]): [HomeCard!]!
  notifications: [HomeNotification!]!
  permissions: [StaffMemberPermission!]!
}

input StagedUploadTargetGenerateInput {
  clientMutationId: String
  resource: StagedUploadTargetGenerateUploadResource!
  filename: String!
  mimeType: String!
}

type StagedUploadTargetGeneratePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  parameters: [MutationsStagedUploadTargetGenerateUploadParameter!]!
  url: String!

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

enum StagedUploadTargetGenerateUploadResource {
  TIMELINE
  PRODUCT_IMAGE
  COLLECTION_IMAGE
}

type StorefrontAccessToken implements Node {
  accessScopes: [AccessScope!]!
  accessToken: String!
  createdAt: DateTime!
  id: ID!
  title: String!
  updatedAt: DateTime!
}

type StorefrontAccessTokenConnection {
  # A list of edges.
  edges: [StorefrontAccessTokenEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type StorefrontAccessTokenCreatePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  shop: Shop!
  storefrontAccessToken: StorefrontAccessToken

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

input StorefrontAccessTokenDeleteInput {
  clientMutationId: String
  id: ID!
}

type StorefrontAccessTokenDeletePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  deletedStorefrontAccessTokenId: ID

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

type StorefrontAccessTokenEdge {
  cursor: String!
  node: StorefrontAccessToken!
}

input StorefrontAccessTokenInput {
  clientMutationId: String
  title: String!
}

type StorefrontPage implements Node {
  id: ID!
}

type StringConnection {
  # A list of edges.
  edges: [StringEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type StringEdge {
  cursor: String!
  node: String!
}

type SuggestedOrderTransaction {
  accountNumber: String
  amount: Money!
  formattedGateway: String
  gateway: String

  # Specifies the available amount to refund on the gateway. Only available within SuggestedRefund.
  maximumRefundable: Money
  parentTransaction: OrderTransaction
}

type SuggestedRefund {
  amount: Money!
  maximumRefundable: Money!
  refundLineItems: [RefundLineItem!]!
  shipping: ShippingRefund!
  subtotal: Money!
  suggestedTransactions: [SuggestedOrderTransaction!]!
  totalTaxes: Money!
}

type TaxLine {
  price: Money!
  rate: Float
  ratePercentage: Float
  title: String!
}

input TimelineCommentCreateInput {
  clientMutationId: String
  resourceId: ID!
  message: String!
  attachments: [AttachmentInput!]
}

type TimelineCommentCreatePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  event: CommentEvent

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

input TimelineCommentDeleteInput {
  clientMutationId: String
  id: ID!
}

type TimelineCommentDeletePayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  deletedTimelineCommentId: ID
  subject: CommentEventSubject

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

input TimelineCommentEditInput {
  clientMutationId: String
  id: ID!
  message: String!
  attachments: [AttachmentInput!]
}

type TimelineCommentEditPayload {
  clientMutationId: String @deprecated(reason: "Relay is moving away from requiring this field")
  event: CommentEvent

  # List of errors that occurred executing the mutation.
  userErrors: [UserError!]!
}

# An unsigned 64-bit integer. Represents whole numeric values between 0 and 2^64 - 1 encoded as a string of base-10 digits.
scalar UnsignedInt64

# An RFC 3986 and RFC 3987 compliant URI string.
scalar URL

# Represents an error in the input of a mutation.
type UserError {
  # Path to input field which caused the error.
  field: [String!]

  # The error message.
  message: String!
}

# Units of measurements for weight.
enum WeightUnit {
  # 1 equals 1000 grams
  KILOGRAMS

  # Metric system unit of mass
  GRAMS

  # 1 equals 16 ounces
  POUNDS

  # Imperial system unit of mass
  OUNCES
}
